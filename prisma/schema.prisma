// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                          String                  @id @default(uuid())
  username                    String
  createdAt                   DateTime                @default(now())
  password                    String
  phoneNumber                 String                  @unique
  email                       String                  @unique
  profileImageKey             String                  @default("")
  projects                    Project[]
  ProjectMember               ProjectMember[]
  receivedPlatformInvitations PlatformInvitation[]    @relation(name: "Invitee")
  sentPlatformInvitations     PlatformInvitation[]    @relation(name: "User")
  receivedProjectInvitations  ProjectInvitation[]     @relation(name: "Invitee User")
  sentProjectInvitations      ProjectInvitation[]     @relation(name: "Invited User")
  TaskUpdate                  TaskUpdate[]
  ProjectTask                 ProjectTask[]
  TaskStatusTransitions       TaskStatusTransitions[]
  Notifications               Notifications[]
}

model PlatformInvitation {
  id         String   @id @default(uuid())
  displayId  Int      @default(autoincrement())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())
  senderId   String
  senderName String?
  invitedBy  User     @relation("User", fields: [senderId], references: [id])
  receiverId String
  invitee    User     @relation("Invitee", fields: [receiverId], references: [id])
  status     String
}

model Project {
  id                      String                    @id @default(uuid())
  displayId               Int                       @default(autoincrement())
  createdAt               DateTime                  @default(now())
  completedAt             DateTime?
  name                    String
  type                    ProjectType               @default(self)
  location                String?
  latitude                Float
  longitude               Float
  startDate               String?
  endDate                 String?
  startTime               String?
  endTime                 String?
  client                  String?
  description             String?
  belongsToId             String
  belongsTo               User                      @relation(fields: [belongsToId], references: [id])
  Update                  Update[]
  ProjectMember           ProjectMember[]
  ProjectInvitation       ProjectInvitation[]
  ProjectAttachment       ProjectAttachment[]
  TaskUpdate              TaskUpdate[]
  ProjectTask             ProjectTask[]
  ProjectMemberOnProjects ProjectMemberOnProjects[]
  status                  PROJECT_STATUS            @default(draft)
}

model ProjectAttachment {
  id                String   @id @default(uuid())
  displayId         Int      @default(autoincrement())
  createdAt         DateTime @default(now())
  projectId         String
  project           Project  @relation(fields: [projectId], references: [id])
  attachmentType    String
  attachmentSize    Int
  attachmentFileKey String   @default("")
  attachmentName    String   @default("FileName")
  userId            String
  addedBy           String
}

model ProjectInvitation {
  id        String                    @id @default(uuid())
  displayId Int                       @default(autoincrement())
  createdAt DateTime                  @default(now())
  updatedAt DateTime                  @default(now())
  invitedBy User                      @relation("Invited User", fields: [userId], references: [id])
  userId    String
  inviteeId String
  invitee   User                      @relation("Invitee User", fields: [inviteeId], references: [id])
  role      Role                      @default(manager)
  projectId String
  project   Project                   @relation(fields: [projectId], references: [id])
  status    PROJECT_INVITATION_STATUS @default(not_accepted)
}

model ProjectMember {
  id                      String                    @id @default(uuid())
  displayId               Int                       @default(autoincrement())
  createdAt               DateTime                  @default(now())
  role                    Role
  projectId               String
  project                 Project                   @relation(fields: [projectId], references: [id])
  userId                  String
  user                    User                      @relation(fields: [userId], references: [id])
  UpdateComments          UpdateComments[]
  ProjectTask             ProjectTask[]
  ProjectMemberOnProjects ProjectMemberOnProjects[]
  isArchived              Boolean                   @default(false)
  UpdateRatings           UpdateRatings[]
}

model ProjectMemberOnProjects {
  projectId String
  project   Project       @relation(fields: [projectId], references: [id])
  memberId  String
  member    ProjectMember @relation(fields: [memberId], references: [id])
  createdAt DateTime

  @@id([projectId, memberId])
}

model ProjectTask {
  id                    String                  @id @default(uuid())
  displayId             Int                     @default(autoincrement())
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @default(now())
  submittedAt           DateTime?
  rejectedAt            DateTime?
  completedAt           DateTime?
  reopenedAt            DateTime?
  archivedAt            DateTime?
  name                  String
  description           String
  memberId              String
  assignedTo            ProjectMember           @relation(fields: [memberId], references: [id])
  belongsTo             Project                 @relation(fields: [projectId], references: [id])
  createdBy             User                    @relation(fields: [userId], references: [id])
  managedUserId         String
  managedMemberId       String                  @default("")
  managedUserName       String                  @default("")
  userId                String
  status                TASK_STATUS
  projectId             String
  isCompleted           Boolean                 @default(false)
  isReopened            Boolean                 @default(false)
  isArchived            Boolean                 @default(false)
  startDate             String?
  endDate               String?
  startTime             String?
  endTime               String?
  TaskUpdate            TaskUpdate[]
  TaskModifications     TaskModifications[]
  UpdateRatings         UpdateRatings[]
  TaskStatusTransitions TaskStatusTransitions[]
}

model TaskStatusTransitions {
  id        String      @id @default(uuid())
  createdAt DateTime    @default(now())
  status    String
  projectId String
  taskId    String
  task      ProjectTask @relation(fields: [taskId], references: [id])
  userId    String
  markedBy  User        @relation(fields: [userId], references: [id])
}

model TaskUpdate {
  id        String @id @default(uuid())
  displayId Int    @default(autoincrement())

  createdAt         DateTime         @default(now())
  submittedOn       DateTime?
  approvedOn        DateTime?
  approverId        String?
  approvedBy        String?
  description       String
  projectId         String
  project           Project          @relation(fields: [projectId], references: [id])
  taskId            String
  task              ProjectTask      @relation(fields: [taskId], references: [id])
  status            UPDATE_STATUS
  createdBy         User             @relation(fields: [userId], references: [id])
  userId            String
  attachmentType    String?
  attachmentSize    Int?
  attachmentFileKey String?
  attachmentName    String?
  rating            Float?
  isFlagged         Boolean          @default(false)
  latitude          Float?
  longitude         Float?
  UpdateComments    UpdateComments[]
  UpdateRatings     UpdateRatings[]
}

model MobileOtp {
  id           String   @id @default(uuid())
  createdAt    DateTime @default(now())
  phone_number String
  otp          Int
  expiryTime   Int
  isExpired    Boolean  @default(false)
  userId       String
}

model TaskModifications {
  id               Int         @id @default(autoincrement())
  createdAt        DateTime    @default(now())
  taskId           String
  task             ProjectTask @relation(fields: [taskId], references: [id])
  oldMemberId      String?
  newMemberId      String?
  oldManagedUserId String?
  newManagedUserId String?
}

model UpdateComments {
  id            String        @id @default(uuid())
  createdAt     DateTime      @default(now())
  memberId      String
  projectMember ProjectMember @relation(fields: [memberId], references: [id])
  taskUpdateId  String
  belongsTo     TaskUpdate    @relation(fields: [taskUpdateId], references: [id])
  comment       String
}

model UpdateRatings {
  id            String        @id @default(uuid())
  displayId     Int           @default(autoincrement())
  createdAt     DateTime      @default(now())
  memberId      String
  projectMember ProjectMember @relation(fields: [memberId], references: [id])
  rating        Int
  taskUpdateId  String
  taskUpdate    TaskUpdate    @relation(fields: [taskUpdateId], references: [id])
  taskId        String
  task          ProjectTask   @relation(fields: [taskId], references: [id])
}

model Notifications {
  id          String   @id @default(uuid())
  displayId   Int      @default(autoincrement())
  createdAt   DateTime @default(now())
  userId      String
  type        String?
  user        User     @relation(fields: [userId], references: [id])
  description String
  title       String
  expired     Boolean  @default(false)
}

enum TASK_STATUS {
  draft
  in_progress
  in_review
  completed
  delayed
  archived
  overdue
}

enum PROJECT_STATUS {
  in_progress
  completed
  draft
  archived
  overdue
}

enum PROJECT_INVITATION_STATUS {
  accepted
  rejected
  not_accepted
}

enum UPDATE_STATUS {
  approved
  in_review
  flagged
}

enum Role {
  manager
  worker
  guest
  admin
}

enum ProjectType {
  self
  team
}

model Update {
  id        String        @id @default(uuid())
  createdAt DateTime      @default(now())
  updatedAt DateTime
  status    UPDATE_STATUS @default(in_review)
  version   String?
  projectId String
  belongsTo Project       @relation(fields: [projectId], references: [id])
}
