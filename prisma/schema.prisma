// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                          String               @id @default(uuid())
  username                    String
  createdAt                   DateTime             @default(now())
  password                    String
  phoneNumber                 String               @unique
  email                       String               @unique
  projects                    Project[]
  ProjectMember               ProjectMember[]
  receivedPlatformInvitations PlatformInvitation[] @relation(name: "Invitee")
  sentPlatformInvitations     PlatformInvitation[] @relation(name: "User")
  receivedProjectInvitations  ProjectInvitation[]  @relation(name: "Invitee User")
  sentProjectInvitations      ProjectInvitation[]  @relation(name: "Invited User")
  TaskUpdate                  TaskUpdate[]
  ProjectTask                 ProjectTask[]
}

model PlatformInvitation {
  id         String   @id @default(uuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())
  senderId   String
  senderName String?
  user       User     @relation("User", fields: [senderId], references: [id])
  receiverId String
  invitee    User     @relation("Invitee", fields: [receiverId], references: [id])
  status     String
}

model Project {
  id                      String                    @id @default(uuid())
  createdAt               DateTime                  @default(now())
  name                    String
  type                    ProjectType               @default(self)
  location                String?
  latitude                Float
  longitude               Float
  startDate               String?
  endDate                 String?
  startTime               String?
  endTime                 String?
  client                  String?
  description             String?
  belongsToId             String
  belongsTo               User                      @relation(fields: [belongsToId], references: [id])
  Update                  Update[]
  ProjectMember           ProjectMember[]
  ProjectInvitation       ProjectInvitation[]
  ProjectAttachment       ProjectAttachment[]
  TaskUpdate              TaskUpdate[]
  ProjectTask             ProjectTask[]
  ProjectMemberOnProjects ProjectMemberOnProjects[]
  status                  PROJECT_STATUS            @default(IN_PROGRESS)
}

model ProjectAttachment {
  id                String   @id @default(uuid())
  createdAt         DateTime @default(now())
  projectId         String
  project           Project  @relation(fields: [projectId], references: [id])
  attachmentType    String
  attachmentSize    Int
  attachmentFileKey String   @default("")
  attachmentName    String   @default("FileName")
  userId            String
  addedBy           String
}

model ProjectInvitation {
  id        String                    @id @default(uuid())
  createdAt DateTime                  @default(now())
  updatedAt DateTime                  @default(now())
  invitedBy User                      @relation("Invited User", fields: [userId], references: [id])
  userId    String
  inviteeId String
  invitee   User                      @relation("Invitee User", fields: [inviteeId], references: [id])
  role      Role                      @default(manager)
  projectId String
  project   Project                   @relation(fields: [projectId], references: [id])
  status    PROJECT_INVITATION_STATUS @default(not_accepted)
}

model ProjectMember {
  id                      String                    @id @default(uuid())
  createdAt               DateTime                  @default(now())
  role                    Role
  projectId               String
  project                 Project                   @relation(fields: [projectId], references: [id])
  userId                  String
  user                    User                      @relation(fields: [userId], references: [id])
  UpdateComments          UpdateComments[]
  ProjectTask             ProjectTask[]
  ProjectMemberOnProjects ProjectMemberOnProjects[]
}

model ProjectMemberOnProjects {
  projectId String
  project   Project       @relation(fields: [projectId], references: [id])
  memberId  String
  member    ProjectMember @relation(fields: [memberId], references: [id])
  createdAt DateTime

  @@id([projectId, memberId])
}

model ProjectTask {
  id              String        @id @default(uuid())
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @default(now())
  name            String
  description     String
  memberId        String
  assignedTo      ProjectMember @relation(fields: [memberId], references: [id])
  belongsTo       Project       @relation(fields: [projectId], references: [id])
  createdBy       User          @relation(fields: [userId], references: [id])
  managedUserId   String
  managedUserName String        @default("")
  userId          String
  status          TASK_STATUS
  projectId       String
  isCompleted     Boolean       @default(false)
  isReopened      Boolean       @default(false)
  isArchived      Boolean       @default(false)
  startDate       String?
  endDate         String?
  startTime       String?
  endTime         String?
  TaskUpdate      TaskUpdate[]
}

model TaskUpdate {
  id                String           @id @default(uuid())
  createdAt         DateTime         @default(now())
  submittedOn       DateTime?
  description       String
  projectId         String
  project           Project          @relation(fields: [projectId], references: [id])
  taskId            String
  task              ProjectTask      @relation(fields: [taskId], references: [id])
  status            UPDATE_STATUS
  createdBy         User             @relation(fields: [userId], references: [id])
  userId            String
  attachmentType    String?
  attachmentSize    BigInt?
  attachmentFileKey String?
  attachmentName    String?
  rating            Float?
  isFlagged         Boolean          @default(false)
  latitude          Float?
  longitude         Float?
  UpdateComments    UpdateComments[]
}

model UpdateComments {
  id            String        @id @default(uuid())
  createdAt     DateTime      @default(now())
  memberId      String
  projectMember ProjectMember @relation(fields: [memberId], references: [id])
  taskUpdateId  String
  belongsTo     TaskUpdate    @relation(fields: [taskUpdateId], references: [id])
  comment       String
}

enum TASK_STATUS {
  DRAFT
  IN_PROGRESS
  IN_REVIEW
  COMPLETED
  ARCHIVED
  REOPENED
}

enum PROJECT_STATUS {
  IN_PROGRESS
  COMPLETED
  ARCHIVED
  OVERDUE
}

enum PROJECT_INVITATION_STATUS {
  accepted
  rejected
  not_accepted
}

enum UPDATE_STATUS {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  ARCHIVED
}

enum Role {
  manager
  worker
  guest
  admin
}

enum ProjectType {
  self
  team
}

model Update {
  id        String        @id @default(uuid())
  createdAt DateTime      @default(now())
  updatedAt DateTime
  status    UPDATE_STATUS @default(IN_PROGRESS)
  version   String?
  projectId String
  belongsTo Project       @relation(fields: [projectId], references: [id])
}
